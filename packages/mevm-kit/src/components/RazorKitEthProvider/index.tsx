import React, { ReactNode } from 'react';
import { useAccountEffect } from 'wagmi';
import type { Chain } from 'wagmi/chains';
import { AppContext, defaultAppInfo, DisclaimerComponent } from '../../contexts/AppContext';
import { clearWalletConnectDeepLink } from '../../utils/walletConnectDeepLink';
import { RazorKitEthChainProvider } from '../../contexts/RazorKitEthChainContext';
import { WalletButtonProvider } from '../../contexts/WalletButtonContext';
import { ShowRecentTransactionsContext } from '../../contexts/ShowRecentTransactionsContext';
import { TransactionStoreProvider } from '../../transactions/TransactionStoreContext';
import { ShowBalanceProvider } from '../../contexts/ShowBalanceContext';
import { EthModalProvider } from '../../contexts/EthModalContext';
import { ThemeVars } from '../../css/sprinkles.css';
import { AvatarComponent, AvatarContext, defaultAvatar } from '../../contexts/AvatarContext';
import { ModalSizeOptions, ModalSizeProvider, ModalSizes } from '../../contexts/ModalSizeContext';
import { Locale } from '../../locales';
import { lightTheme } from '../../themes/lightTheme';
import { usePreloadImages } from '../../hooks/usePreloadImages';
import { useFingerprint } from '../../hooks/useFingerprint';
import { createThemeRootProps, createThemeRootSelector, ThemeIdContext } from '../../contexts/ThemeIdContext';
import { I18nProvider } from '../../contexts/I18nContext';
import { CoolModeContext } from '../../contexts/CoolModeContext';
import { cssStringFromTheme } from '../../css/cssStringFromTheme';

export type Theme =
  | ThemeVars
  | {
      lightMode: ThemeVars;
      darkMode: ThemeVars;
    };


export interface RazorKitEthProviderProps {
  initialChain?: Chain | number;
  id?: string;
  children: ReactNode;
  theme?: Theme | null;
  showRecentTransactions?: boolean;
  appInfo?: {
    appName?: string;
    learnMoreUrl?: string;
    disclaimer?: DisclaimerComponent;
  };
  coolMode?: boolean;
  avatar?: AvatarComponent;
  modalSize?: ModalSizes;
  locale?: Locale;
}

const defaultTheme = lightTheme();

export function RazorKitEthProvider({
  appInfo,
  avatar,
  children,
  coolMode = false,
  id,
  initialChain,
  locale,
  modalSize = ModalSizeOptions.WIDE,
  showRecentTransactions = false,
  theme = defaultTheme,
}: RazorKitEthProviderProps) {
  usePreloadImages();
  useFingerprint();
  
  useAccountEffect({ onDisconnect: clearWalletConnectDeepLink });

  if (typeof theme === 'function') {
    throw new Error(
      'A theme function was provided to the "theme" prop instead of a theme object. You must execute this function to get the resulting theme object.',
    );
  }

  const selector = createThemeRootSelector(id);

  const appContext = {
    ...defaultAppInfo,
    ...appInfo,
  };

  const avatarContext = avatar ?? defaultAvatar;

  return (
    <RazorKitEthChainProvider initialChain={initialChain}>
      <WalletButtonProvider>
        <I18nProvider locale={locale}>
          <CoolModeContext.Provider value={coolMode}>
            <ModalSizeProvider modalSize={modalSize}>
              <ShowRecentTransactionsContext.Provider value={showRecentTransactions}>
                <TransactionStoreProvider>
                  <AvatarContext.Provider value={avatarContext}>
                    <AppContext.Provider value={appContext}>
                      <ThemeIdContext.Provider value={id}>
                        <ShowBalanceProvider>
                          <EthModalProvider>
                            {theme ? (
                                <div {...createThemeRootProps(id)}>
                                  <style
                                    // biome-ignore lint/security/noDangerouslySetInnerHtml: TODO
                                    dangerouslySetInnerHTML={{
                                      // Selectors are sanitized to only contain alphanumeric
                                      // and underscore characters. Theme values generated by
                                      // cssStringFromTheme are sanitized, removing
                                      // characters that terminate values / HTML tags.
                                      __html: [
                                        `${selector}{${cssStringFromTheme(
                                          'lightMode' in theme
                                            ? theme.lightMode
                                            : theme,
                                        )}}`,

                                        'darkMode' in theme
                                          ? `@media(prefers-color-scheme:dark){${selector}{${cssStringFromTheme(
                                              theme.darkMode,
                                              { extends: theme.lightMode },
                                            )}}}`
                                          : null,
                                      ].join(''),
                                    }}
                                  />
                                  {children}
                                </div>
                              ) : (
                              children
                            )}
                          </EthModalProvider>
                        </ShowBalanceProvider>
                      </ThemeIdContext.Provider>
                    </AppContext.Provider>
                  </AvatarContext.Provider>
                </TransactionStoreProvider>
              </ShowRecentTransactionsContext.Provider>
            </ModalSizeProvider>
          </CoolModeContext.Provider>
        </I18nProvider>
      </WalletButtonProvider>
    </RazorKitEthChainProvider>
  );
}